name: Linux - Build, Test, and Upload

on:
  push:
    branches: [ main ]
    tags:
      - v*
  pull_request:
    branches: [ main ]

# defaults:
#   run:
#     shell: bash
#     working-directory: ./scripts

jobs:
  build:
    name: Build and Upload Artifact
    runs-on: ubuntu-latest
    container:
      # https://github.com/pypa/manylinux
      # NOTE: Intel MKL is incompatible with manylinux2014
      image: quay.io/pypa/manylinux_2_28_x86_64

    env:
      # package versions are set in github actions variables:
      #   settings - secrets and variables - actions - variables
      PETSC_ARCH: arch-linux-c-opt-mkl

      # Compile flags (C/CXX/F)
      # -------------
      # generate position independent code (PIC) meaning that it is insensitive to
      # the exact order in which the dynamic libs are loaded
      MPICH_FLAGS: -fPIC
      # we do not want to optimize too much to a specific CPU (march, mtune)
      # fp-model=precise is for MKL otherwise maybe not necessary
      PETSC_FLAGS: -O2 -s -march=x86_64 -fp-model=precise

      # store libraries in here
      LIB_DIR: /custom_libs

      PYTHON: cp311

      MPICH_BASE_UR: https://www.mpich.org/static/downloads
      PETSC_BASE_URL: https://web.cels.anl.gov/projects/petsc/download/release-snapshots
      MKL_BASE_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/cdff21a5-6ac7-4b41-a7ec-351b5f9ce8fd

    if: ${{ startsWith(github.ref, 'refs/tags') || !contains(github.event.head_commit.message, '[skip ci]') }}

    steps:
      # checkout repository
      # checkout@v4 does not seem to work with containers
      # https://github.com/actions/checkout/issues/1474
    # - uses: actions/checkout@v3

    - name: Prepare
      run: |

        echo "Creating ${{ env.LIB_DIR }}"
        mkdir ${{ env.LIB_DIR }}

        # ugly but for testing
        # echo "Adding python to GITHUB_PATH"
        # PYTHON_VERSION=cp311
        # export PATH=/opt/python/cp311-cp311/bin:$PATH


        # export PATH=/opt/python/${{ env.PYTHON }}-${{ env.PYTHON }}/bin:$PATH
        # echo "PYTHON_PATH=/opt/python/${{ env.PYTHON }}-${{ env.PYTHON }}/bin" >> $GITHUB_ENV

        # GITHUB_PATH does not seem to have any effect inside a container!

        # Add python to the path
        echo "/opt/python/${{ env.PYTHON }}-${{ env.PYTHON }}/bin" >> $GITHUB_PATH

    - name: Install oneAPI MKL
      run: |

        echo the path is
        echo $PATH

        echo python is now set to
        echo $(which python)


        MKL_NAME=l_onemkl_p_${{ vars.MKL_VERSION }}.664
        ONEAPI_DIR=${{ env.LIB_DIR }}/oneAPI

        # Download install script
        curl -O -L ${{ env.MKL_BASE_URL }}/${MKL_NAME}.sh

        # Install
        sh ./${MKL_NAME}.sh -a --silent --eula accept --install-dir=$ONEAPI_DIR

        # This sets a bunch of variables including MKLROOT, PKG_CONFIG_PATH
        source $ONEAPI_DIR/setvars.sh

        # expose the ones we need
        echo "MKLROOT=${MKLROOT}" >> $GITHUB_ENV
        # Add to PKG_CONFIG_PATH
        # echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}" >> $GITHUB_ENV


    - name: Build MPICH
      run: |

        MPICH_NAME=mpich-${{ vars.MPICH_VERSION }}
        MPICH_TAR=${MPICH_NAME}.tar.gz
        MPICH_URL=https://www.mpich.org/static/downloads/${{ vars.MPICH_VERSION }}/${MPICH_TAR}
        MPICH_ROOT_DIR=${{ env.LIB_DIR }}/${MPICH_NAME}
        MPICH_BUILD_DIR=${MPICH_ROOT_DIR}/build
        MPICH_INSTALL_DIR=${MPICH_ROOT_DIR}/install

        curl -O -L ${MPICH_URL}
        tar -xzf ${MPICH_TAR} -C ${{ env.LIB_DIR }}

        mkdir ${MPICH_BUILD_DIR}
        mkdir ${MPICH_INSTALL_DIR}

        cd ${MPICH_BUILD_DIR}

        # enable-fast=all/yes sets O2,ndebug,alwaysinline

        ../configure \
          CFLAGS=${MPICH_FLAGS} \
          CXXFLAGS=${MPICH_FLAGS} \
          FCLAGS=${MPICH_FLAGS} \
          FFLAGS=${MPICH_FLAGS} \
          --prefix=${MPICH_INSTALL_DIR} \
          --enable-fast=all \
          --with-device=ch3:nemesis \
          --with-pm=hydra \
          --with-hwloc=embedded \
          --disable-maintainer-mode \
          --disable-dependency-tracking

        make
        make install

        echo "MPICH_INSTALL_DIR=${MPICH_INSTALL_DIR}" >> $GITHUB_ENV
        # echo "PKG_CONFIG_PATH=${MPICH_INSTALL_DIR}/lib/pkgconfig:${PKG_CONFIG_PATH}" >> $GITHUB_ENV


    - name: Build PETSc
      run: |

        # PETSC
        PETSC_NAME=petsc-${{ vars.PETSC_VERSION }}
        PETSC_TAR=${PETSC_NAME}.tar.gz
        PETSC_URL=https://web.cels.anl.gov/projects/petsc/download/release-snapshots/${PETSC_TAR}
        PETSC_DIR=${{ env.LIB_DIR }}/${PETSC_NAME}

        curl -O -L ${PETSC_URL}
        tar -xzf ${PETSC_TAR} -C ${{ env.LIB_DIR }}
        cd ${PETSC_DIR}

        # configure
        python configure \
        --PETSC_ARCH=${PETSC_ARCH} \
        --COPTFLAGS=${PETSC_FLAGS} \
        --CXXOPTFLAGS=${PETSC_FLAGS} \
        --FOPTFLAGS=${PETSC_FLAGS} \
        --with-x=0 \
        --with-debugging=0 \
        --with-fortran-bindings=0 \
        --with-mpi=1 \
        --with-mpi-dir=${MPICH_INSTALL_DIR} \
        --with-hypre=1 \
        --download-hypre \
        --with-blaslapack-dir=${MKLROOT} \
        --with-mkl_pardiso-dir=${MKLROOT} \
        --with-shared-library=1

        make all
        make check

        echo "PETSC_DIR=${PETSC_DIR}" >> $GITHUB_ENV
        # PETSC_ARCH can be reference as ${{ env.PETSC_ARCH }} or $PETSC_ARCH
        # echo "PETSC_ARCH=${{ env.PETSC_ARCH }}" >> $GITHUB_ENV

        # add to PKG_CONFIG_PATH
        # echo "PKG_CONFIG_PATH=${PETSC_DIR}/${PETSC_ARCH})/lib/pkgconfig:${PKG_CONFIG_PATH}" >> $GITHUB_ENV

    - name: Build wheel for petsc4py
      run: |

        # We need PETSC_DIR and PETSC_ARCH for
        echo "Using PETSC_DIR   ${PETSC_DIR}"
        echo "Using PETSC_ARCH  ${PETSC_ARCH}"

        # petsc4py subdirectory
        cd ${PETSC_DIR}/src/binding/petsc4py

        # petsc4py reads configuration etc. from
        # ${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscvariables
        pip wheel -v --no-deps --w wheelhouse .
        # env vars AUDITWHEEL_POLICY, AUDITWHEEL_PLAT, AUDITWHEEL_ARCH are already set
        auditwheel repair wheelhouse/*.whl

    - name: Install petsc4py
      run: pip install wheelhouse/*.whl -y

  # test:
  #   needs: build

  #   steps:
    # - name: Install test dependencies
    #   run: pip install pytest -y

    - name: Running tests for petsc4py
      run: |

        cd ${PETSC_DIR}/src/binding/petsc4py
        python test/runtests.py

  # publish:
  #   needs: build

  #   steps:
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-wheels
        path: wheelhouse/*.whl

    # - name: Upload to PyPI
    #   if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags') }}
    #   run: |
    #     $PYTHON -m pip install twine
    #     $PYTHON -m twine upload wheelhouse/*.whl -u __token__ -p "$PASSWORD"
    #   env:
    #     PASSWORD: ${{ secrets.PYPI_TOKEN }}
    #     PYTHON: /opt/python/cp38-cp38/bin/python
