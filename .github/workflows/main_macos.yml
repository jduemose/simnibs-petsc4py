name: MacOS - Build, Test, and Upload

on:
  push:
    # branches: [ main ]
    tags:
      - v*
  # pull_request:
  #   branches: [ main ]

# defaults:
#   run:
#     shell: bash
#     working-directory: ./scripts

# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python


jobs:
  build:
    name: Build and Upload Artifact
    runs-on: macos-14
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.11"]


    env:
      # package versions are set in github actions variables:
      #   settings - secrets and variables - actions - variables
      PETSC_ARCH: arch-darwin-c-opt
      PETSC_FLAGS: -O2 # C, CXX, F

      # store libraries in here
      LIB_DIR: ${{ github.workspace }}

      PETSC_BASE_URL: https://web.cels.anl.gov/projects/petsc/download/release-snapshots

    if: ${{ startsWith(github.ref, 'refs/tags') || !contains(github.event.head_commit.message, '[skip ci]') }}

    steps:
      # checkout repository
      # checkout@v4 does not seem to work with containers
      # https://github.com/actions/checkout/issues/1474
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python Dependencies
      run: |

        # Install build dependencies manually and use --no-build-isolation
        # We do this to avoid building against numpy 2 as the numpy version is
        # not specified in petsc4py's requires section
        # pip install cython 'numpy<2' setuptools wheel
        # pip install pytest
        pip install cibuildwheel

        # cpython version string representation, e.g., 3.11 -> cp311
        PYTHON_VERSION_STR=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
        echo "PYTHON_VERSION_STR=${PYTHON_VERSION_STR}" >> $GITHUB_ENV

        # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi


    - name: Prepare
      # make is installed as gmake
      run: brew install make
    # run: mkdir ${{ env.LIB_DIR }}

    - name: Retrieve PETSc from cache
      id: cache-petsc
      run: |
        PETSC_NAME=petsc-${{ vars.PETSC_VERSION }}
        PETSC_DIR=${{ env.LIB_DIR }}/${PETSC_NAME}
        echo "PETSC_DIR=${PETSC_DIR}" >> $GITHUB_ENV
        echo "PETSC4PY_DIR=${PETSC_DIR}/src/binding/petsc4py" >> $GITHUB_ENV

    - uses: actions/cache/restore@v4
      with:
        path: ${{ env.PETSC_DIR }}
        key: ${{ runner.os }}-petsc

    - name: Build PETSc
      if: steps.cache-petsc.outputs.cache-hit != 'true'
      run: |

        # PETSC
        PETSC_NAME=petsc-${{ vars.PETSC_VERSION }}
        PETSC_TAR=${PETSC_NAME}.tar.gz
        PETSC_URL=https://web.cels.anl.gov/projects/petsc/download/release-snapshots/${PETSC_TAR}
        PETSC_DIR=${{ env.LIB_DIR }}/${PETSC_NAME}

        curl -O -L ${PETSC_URL}
        tar -xzf ${PETSC_TAR} -C ${{ env.LIB_DIR }}
        cd ${PETSC_DIR}

        # configure
        # PETSC_ARCH can be referenced as ${{ env.PETSC_ARCH }} or $PETSC_ARCH
        python configure \
        --PETSC_ARCH=${PETSC_ARCH} \
        --COPTFLAGS=${PETSC_FLAGS} \
        --CXXOPTFLAGS=${PETSC_FLAGS} \
        --FOPTFLAGS=${PETSC_FLAGS} \
        --with-debugging=0 \
        --with-fortran-bindings=0 \
        --with-make-exec=gmake \
        --with-mpi=1 --download-mpich \
        --with-hypre=1 --download-hypre \
        --download-mumps --download-scalapack --download-metis \
        --with-shared-library=1

        # mumps seems to be statically compiled even with shared-library=1

        # from homebrew...
        # --with-x=0 \

        make all
        make check

        echo "PETSC_DIR=${PETSC_DIR}" >> $GITHUB_ENV
        echo "PETSC4PY_DIR=${PETSC_DIR}/src/binding/petsc4py" >> $GITHUB_ENV

        # add to PKG_CONFIG_PATH
        # echo "PKG_CONFIG_PATH=${PETSC_DIR}/${PETSC_ARCH})/lib/pkgconfig:${PKG_CONFIG_PATH}" >> $GITHUB_ENV

    - uses: actions/cache/save@v4
      if: steps.cache-petsc.outputs.cache-hit != 'true'
      with:
        path: ${{ env.PETSC_DIR }}
        key: ${{ runner.os }}-petsc

    - name: Build wheel for petsc4py
      run: |

        echo "Using PETSC_DIR   ${PETSC_DIR}"
        echo "Using PETSC_ARCH  ${PETSC_ARCH}"

        WHEEL_DIR=${PETSC4PY_DIR}/wheelhouse

        # otools -L /path/to/.dylib

        # petsc4py reads configuration etc. from
        # ${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscvariables

        MAJOR_MAC_VERSION=$(sw_vers -productVersion | cut -d '.' -f 1,2)
        echo "major mac version ${MAJOR_MAC_VERSION}"
        echo "MAJOR_MAC_VERSION=${MAJOR_MAC_VERSION}" >> $GITHUB_ENV

        echo which python before?
        which python

        # build wheel using cibuildwheel
        # as of now, we don't really use any features of cibw so it is a bit
        # overkill, however, it does ensure that an arm64 wheel is built if
        # the host machine has this arch. Just building the wheel using python
        # and pip directly will result in a universal2 built which is invalid
        # because PETSc is compiled only for arm64.
        # cibw achieves this by setting the ARCHFLAGS env var to arm64 instead
        # of having arm64 and x86_64
        # One caveat of cibw is that on arm64 macs it defaults to setting
        # MACOSX_DEPLOYMENT_TARGET to 11.0 which is the minimum target that
        # is supported on arm64 machines. However, currently we build on 14.0
        # so I set this manually for now.
        python -m cibuildwheel --output-dir ${WHEEL_DIR} ${PETSC4PY_DIR}

        echo which python after?
        which python

        # petsc4py-3.21.3-cp311-cp311-macosx-14_0_arm64.whl
        WHEEL_FILENAME=${WHEEL_DIR}/*.whl

        echo "WHEEL_DIR=${WHEEL_DIR}" >> $GITHUB_ENV
        echo "WHEEL_FILENAME=${WHEEL_FILENAME}" >> $GITHUB_ENV

      env:
        CIBW_BUILD: ${{ env.PYTHON_VERSION_STR }}-*
        CIBW_BEFORE_BUILD: "pip install cython 'numpy<2' setuptools"
        CIBW_BUILD_FRONTEND: "pip; args: --no-build-isolation" # additional args
        MACOSX_DEPLOYMENT_TARGET: "14.0"

    # - name: Build wheel for petsc4py
    #   run: |

    #     echo "Using PETSC_DIR   ${PETSC_DIR}"
    #     echo "Using PETSC_ARCH  ${PETSC_ARCH}"
    #     which python

    #     WHEEL_DIR=${PETSC4PY_DIR}/wheelhouse

    #     # otools -L /path/to/.dylib

    #     # petsc4py reads configuration etc. from
    #     # ${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscvariables

    #     python -m pip wheel -v --no-deps --no-build-isolation -w ${WHEEL_DIR} ${PETSC4PY_DIR}

    #     # overwrites old wheel
    #     echo "What wheels exist?"
    #     ls ${WHEEL_DIR}/*.whl

    #     echo "List all dependencies"
    #     delocate-listdeps ${WHEEL_DIR}/*.whl --all

    #     echo "List some dependencies"
    #     delocate-listdeps ${WHEEL_DIR}/*.whl

    #     delocate-wheel --require-archs=arm64 -w ${WHEEL_DIR} ${WHEEL_DIR}/*.whl

    #     # Filename of the fixed wheel
    #     PACKAGE_TAG="petsc4py-${{ vars.PETSC_VERSION }}"
    #     #PYTHON_ABI_TAG="${{ matrix.python-version }}-${{ matrix.python-version }}"
    #     PYTHON_ABI_TAG="cp311-cp311"
    #     PLATFORM_TAG=$(python -c "import sysconfig; print(sysconfig.get_platform())")

    #     # petsc4py-3.21.3-cp311-cp311-macosx-14_0_arm64.whl
    #     WHEEL_FILENAME=${WHEEL_DIR}/${PACKAGE_TAG}-${PYTHON_ABI_TAG}-${PLATFORM_TAG}.whl

    #     echo "WHEEL_DIR=${WHEEL_DIR}" >> $GITHUB_ENV
    #     echo "WHEEL_FILENAME=${WHEEL_FILENAME}" >> $GITHUB_ENV

    - name: Install petsc4py
      run: python -m pip install ${WHEEL_FILENAME}

  # test:
  #   needs: build

  #   steps:
    # - name: Install test dependencies
    #   run: pip install pytest

    - name: Running tests (from petsc4py)
      run: python ${PETSC4PY_DIR}/test/runtests.py --summary

    - name: Install test dependencies
      run: pip install pytest scipy

    - name: Running tests (internal)
      run: pytest tests

  # publish:
  #   needs: test

    # steps:
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      # if: !startsWith(github.ref, 'refs/tags/')
      with:
        name: macos-wheels
        path: "${{ env.WHEEL_DIR }}/*.whl"

    # - name: Release
    #   uses: softprops/action-gh-release@v2
    #   if: startsWith(github.ref, 'refs/tags/')
    #   with:
    #     files: wheelhouse/*.whl

        # body_path: CHANGELOG.md
        # repository: my_gh_org/my_gh_repo
        # # note you'll typically need to create a personal access token
        # # with permissions to create releases in the other repo
        # token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}


    # - name: Upload to PyPI
    #   if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags') }}
    #   run: |
    #     $PYTHON -m pip install twine
    #     $PYTHON -m twine upload wheelhouse/*.whl -u __token__ -p "$PASSWORD"
    #   env:
    #     PASSWORD: ${{ secrets.PYPI_TOKEN }}
    #     PYTHON: /opt/python/cp38-cp38/bin/python
