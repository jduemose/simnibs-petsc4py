name: Windows - Build, Test, and Upload

on:
  push:
    branches: [ main ]
    tags:
      - v*
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Upload Artifact
    runs-on: windows-2022
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.11"]
    defaults:
      run:
        shell: cmd

    env:
      # package versions are set in github actions variables:
      #   settings - secrets and variables - actions - variables
      PETSC_ARCH: arch-win-c-opt
      PETSC_VERSION: ${{ vars.PETSC_VERSION }}

      PETSC_FLAGS: -O2 # C, CXX, F

      # store libraries in here
      LIB_DIR: ${{ github.workspace }}

      PETSC_BASE_URL: https://web.cels.anl.gov/projects/petsc/download/release-snapshots

      HYPRE_BASE_URL: https://github.com/hypre-space/hypre/archive/refs/tags

      # OneAPI: 2024.2.1
      WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/d91caaa0-7306-46ea-a519-79a0423e1903/w_BaseKit_p_2024.2.1.101.exe
      WINDOWS_BASEKIT_COMPONENTS: intel.oneapi.win.mkl.devel

      WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/745e923a-3f85-4e1e-b6dd-637c0e9ccba6/w_HPCKit_p_2024.2.1.80.exe
      WINDOWS_HCPKIT_COMPONENTS: intel.oneapi.win.ifort-compiler

      MSMPI_BASE_URL: https://download.microsoft.com/download/A/E/0/AE002626-9D9D-448D-8197-1EA510E297CE

    steps:
    - name: set git stuff
      run: git config --global core.autocrlf input

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install MS-MPI
      run: |

        curl -O %MSMPI_BASE_URL%/msmpisetup.exe
        curl -O %MSMPI_BASE_URL%/msmpisdk.msi

        REM Install to default location (%ProgramFiles%\Microsoft MPI)
        REM msmpisetup.exe -unattend -installroot .\msmpi

        echo Installing MSMPI exec
        msmpisetup.exe -unattend

        REM Install to default location (%ProgramFiles(x86)%\Microsoft SDKs\MPI)

        echo Installing MSMPI SDK
        msmpisdk.msi /quiet /passive /qn /norestart

        echo MSMPI_INC="%ProgramFiles(x86)%\Microsoft SDKs\MPI\Include" >> %GITHUB_ENV%
        echo MSMPI_LIB32="%ProgramFiles(x86)%\Microsoft SDKs\MPI\Lib\x86" >> %GITHUB_ENV%
        echo MSMPI_LIB64="%ProgramFiles(x86)%\Microsoft SDKs\MPI\Lib\x64" >> %GITHUB_ENV%

    # Following instructions from here except we use the online installers
    # as we only need a subset of the components
    # https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml
    - name: Install Intel OneAPI MKL
      run: tools\windows_oneapi_install.bat %WINDOWS_BASEKIT_URL% %WINDOWS_BASEKIT_COMPONENTS%

    - name: Install Intel OneAPI Fortran Compilers
      run: tools\windows_oneapi_install.bat %WINDOWS_HPCKIT_URL% %WINDOWS_HPCKIT_COMPONENTS%

    - name: Test compilers
      run: |

        set SETVARS="%ProgramFiles(x86)%\Intel\oneAPI\setvars.bat"

        call %SETVARS%

        echo Environment variables
        set

        REM echo Check VS compiler
        REM cl
        REM echo Check Intel compiler
        REM ifort /help

        echo SETVARS=%SETVARS% >> %GITHUB_ENV%

    - name: Build HYPRE
      run: |

        call %SETVARS%

        curl -O -L %HYPRE_BASE_URL%/v2.31.0.tar.gz
        tar -x -z -f v2.31.0.tar.gz
        cd hypre-2.31.0/src

        REM -DHYPRE_WITH_CXXSTANDARD=c++20 ^

        REM specify MSMPI otherwise Intel MPI is used because of SETVARS

        cmake -G "Visual Studio 17 2022" ^
          -A x64 ^
          -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=ON ^
          -DHYPRE_ENABLE_SHARED=ON ^
          -DHYPRE_WITH_MPI=ON ^
          -DHYPRE_WITH_MPI_INCLUDE=%MSMPI_INC% ^
          -DHYPRE_WITH_MPI_LIB_DIRS=%MSMPI_LIB64% ^
          -S . -B cmbuild

        cmake --build cmbuild --config Release
        cmake --install cmbuild

        REM The default installation path ("prefix") is in `src/hypre`.
        REM we now have /hypre-2.31.0/src/hypre

        echo HYPRE_INSTALL_DIR=%GITHUB_WORKSPACE%\hypre-2.31.0\src\hypre >> %GITHUB_ENV%

    # https://github.com/cygwin/cygwin-install-action
    # cygwin stuff is *prepended* to path so just using 'bash' should pick up cygwin's bash whereas it is usually git bash
    # Default install location is C:\cygwin
    # cygwin bash: C:\cygwin\bin\bash.exe
    - name: Install Cygwin
      uses: cygwin/cygwin-install-action@master
      with:
        # platform: ${{ matrix.platform }}
        # add-to-path: false
        packages: >-
          python3
          make
          gcc-core
          gcc-g++
          gcc-fortran
          liblapack-devel
          openmpi
          libopenmpi-devel
          libhwloc-devel
          libevent-devel
          zlib-devel

    # - name: Test Cygwin Bash
    #   shell: C:\cygwin\bin\bash.exe --login -o igncr -eo pipefail '{0}'
    #   run: echo "hello from Bash" && uname -o

    # - name: Test Cygwin Bash 2
    #   shell: bash --login -o igncr -eo pipefail '{0}'
    #   run: echo "hello from Bash" && uname -o

    - name: Build PETSc
      run: |

        call %SETVARS%

        echo PETSC_DIR=C:\cygwin\home\%USERNAME%\petsc-%PETSC_VERSION%" >> %GITHUB_ENV%

        bash --login -o igncr -eo pipefail ^
          %cd%\tools\windows_build_petsc_with_cygwin.sh ^
          %PETSC_VERSION% %PETSC_ARCH%

    - name: Install Python Dependencies
      run: |

        REM Install build dependencies manually and use --no-build-isolation
        REM We do this to avoid building against numpy 2 as the numpy version is
        REM not specified in petsc4py's requires section

        pip install cython delvewheel mkl==${{ vars.MKL_VERSION }} 'numpy<2' setuptools wheel
        pip install pytest scipy

        REM if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Build petsc4py
      run: |

        REM replace cygwin paths with windows paths in `petscvariables` file

        bash --login -o igncr -eo pipefail %cd%\tools\windows_cygpath_to_winpath.sh %PETSC_DIR% %PETSC_ARCH%

        REM Download petsc4py

        pip download --no-deps --no-build-isolation petsc4py==%PETSC_VERSION%
        tar -x -z -f petsc4py-%PETSC_VERSION%.tar.gz

        set PETSC4PY_DIR=%cd%\petsc4py-%PETSC_VERSION%
        set WHEEL_DIR=%PETSC4PY_DIR%\wheelhouse

        REM flags are not read unless GCC was used (it seems)

        set CL=-GF -MD -wd4996 -Zc:preprocessor  -O2

        REM set CL=
        REM for /f %i in ('python tools\windows_extract_args_from_petscvariables.py C:\Users\jdue\cygwin\home\jdue\petsc-3.21.4\arch-mswin-c-opt-mkl\lib\petsc\conf\petscvariables CC_FLAGS') do set CL=%i

        REM we need to add HYPRE and msmpi
        REM we need to add
        REM "libraries":["msmpi"],
        REM "library_dirs":[r"C:\Program Files (x86)\Microsoft SDKs\MPI\Lib\x64"],
        REM                r'C:\Users\jdue\Documents\petscbuild\hypre-2.31.0\src\hypre\lib'],
        REM pip install --global-option="-LC:\\Program Files\ (x86)\Microsoft\ SDKs\\MPI\\Lib\\x64 -L" --build-option="-llibpetsc -lmsmpi -lHYPRE -lmkl_tbb_thread"

        REM Fix petsc library name
        REM PETSC_LIB_BASIC = -llibpetsc
        REM ---> PETSC_LIB_BASIC = -lpetsc

        pip wheel --no-deps --no-build-isolation -w %WHEEL_DIR% %PETSC4PY_DIR%

        echo PETSC4PY_DIR=%PETSC4PY_DIR% >> %GITHUB_ENV%
        echo WHEEL_DIR=%WHEEL_DIR% >> %GITHUB_ENV%

    - name: Fix petsc4py
      run: |

        REM Show dependencies that needs to be vendored into the wheel
        delvewheel show %WHEEL_DIR%\*.whl

        wheel unpack -d %WHEEL_DIR% %WHEEL_DIR%\*.whl
        set UNPACK_DIR=%WHEEL_DIR%\petsc4py-%PETSC_VERSION%

        REM Copy DLLs into wheel next to PETSc*.pyd
        set DLL_DIR=%UNPACK_DIR%\petsc4py\lib\%PETSC_ARCH%
        copy %PETSC_DIR\%PETSC_ARCH\lib\libpetsc.dll %DLL_DIR%
        copy %HYPRE_INSTALL_DIR%\bin\HYPRE.dll %DLL_DIR%
        copy C:\WINDOWS\system32\msmpi.dll %DLL_DIR%
        copy C:\WINDOWS\system32\msvcp140.dll %DLL_DIR%

        REM Append to file in order to discover MKL DLLs
        type tools\windows_petsc4py_patch.py >> %UNPACK_DIR%\lib\__init__.py


        wheel pack -d %WHEEL_DIR% %UNPACK_DIR%

    - name: Install petsc4py
      run: pip install %WHEEL_DIR%\*.whl

    - name: Running tests shipped with petsc4py
      run: python %PETSC4PY_DIR%\test\runtests.py --summary

    - name: Running internal tests
      run: pytest tests

  # publish:
  #   needs: build

  #   steps:
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      # if: !startsWith(github.ref, 'refs/tags/')
      with:
        name: windows-wheels
        path: "${{ env.WHEEL_DIR }}/*.whl"
